{"version":3,"sources":["services/google.ts","services/compIds.ts","services/scoreManager.ts","services/compDetails.ts","services/circuitView.ts","pages/Standings.tsx","pages/Results.tsx","images/logo.png","pages/Report.tsx","App.tsx","index.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","DETAILS","order","names","jeena","anahat","sangeet","mehfil","sahana","gathe","awaazein","sheetIds","sapna","KEY_PREFIX","GSheetsScoreManager","cells","teamCount","length","judgeCount","findIndex","v","findLastIndex","indexOf","reduce","slice","acc","row","set","year","comp","yearStr","localStorage","getItem","yearDetails","JSON","parse","localData","get","log","info","spreadsheetId","Error","client","sheets","spreadsheets","values","range","response","this","parseV1","result","raw","setItem","stringify","error","handleComp","numJudges","judgeAvgs","map","i","judgeScores","scores","mean","normal","mapValues","x","rawAverages","normalAverages","normalMedians","median","finalScoresList","compMax","max","compMin","min","CircuitView","num","comps","compDetails","groups","amed","amean","rmed","rmean","amedRank","ameanRank","rmedRank","rmeanRank","attended","avgGroupsPerComp","avgJudgesPerComp","avgCompsPerGroup","_comps","details","handleGComp","e","build_totals","keys","get_stats","get_ranks","group","filter","has","det","size","g","err","total","allScores","allRaw","allNormal","forEach","val","concat","_med","_mean","score","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","cur","idx","a","scoreManager","get_raw_scores","getFullStandings","cv","buckets","bucket","vals","getStandings","Standings","useState","setCv","marks","setMarks","step","setStep","useEffect","temp","process","loader","value","label","Slider","last","onChange","newValue","Grid","container","justify","item","xs","Typography","join","t","alignItems","style","border","ranks","sm","Results","compIndex","setCompIndex","setScores","sheetId","handleChange","fetchStuff","variant","Tabs","c","Tab","Link","href","target","rel","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","team","Report","full","getGroupRanks","stats","getGroupStats","display","margin","height","src","logo","replace","round","spacing","Card","find","_n","k","Divider","_a","ReportView","circuitViews","setCircuitViews","setGroup","numComps","cvPromises","Promise","all","fn","TextField","select","event","sort","MenuItem","App","isSignedIn","setSignedIn","setYear","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","className","to","Button","onClick","clear","signOut","path","lg","signIn","setLevel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c03df5a9.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","interface SingleYear {\n  order: string[];\n  names: Record<string, string>;\n  sheetIds: Record<string, string>;\n}\n\nexport const DETAILS: Record<string, SingleYear> = {\n  \"18-19\": {\n    order: [\"jeena\", \"anahat\", \"sangeet\", \"mehfil\", \"sahana\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      mehfil: \"Mehfil\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      anahat: \"1iFCNADUpzFyqp5UjHsFdSJkSp5C5xU7C0YI3Asf_Q0k\",\n      awaazein: \"1pLN6SKR444CdhzntJjDXnPMlqXtxr3dlTV5lnYWOFXI\",\n      gathe: \"1cg6XptCMQsWfmu7RnncfWP1E5b_FSyFOrDehbwlFUFY\",\n      jeena: \"1B1qh4kKSeAFTV1r3MO4Y5jikyYFGHOe7-c46ha3Y-qc\",\n      mehfil: \"1k7F_gBNM1OfDta5_gT_cHovDmt32jbXw--YMoTk1yc4\",\n      sahana: \"1m9l2EQS3h75dlXz7A8E2JKc5GMXJOHlBS3gPlrgI3b4\",\n      sangeet: \"1pYyUIt2RvZ5AOZwwzIvZKd-KTuUE9uPOpT2BpReqkgo\",\n    },\n  },\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\",\n      gathe: \"1RAqltt5vl4uk0gq3RCe4fNWu0taGokv2UP9vjWXO8JY\",\n      awaazein: \"1KYCn0RWMxbWabw4AuZzzsIyKZyCRnadvqcZVi9t7oDM\",\n    },\n  },\n  \"2022\": {\n    order: [\"sangeet\", \"sapna\", \"jeena\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      awaazein: \"Awaazein\"\n    },\n    sheetIds: {\n      sangeet: \"1HV0ytC_S8O1TrkPBjhH4Nnk43o_S8u-lz53krjFoDi4\"\n    }\n  }\n};\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./compIds\";\nimport { findIndex, reduce, set, get, findLastIndex } from \"lodash\";\nimport { ScoresDict } from \"../types\";\nimport log from \"loglevel\";\n\nconst KEY_PREFIX = \"compDetails\";\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  parseV1(cells: string[][]): [ScoresDict, number] {\n      // Ignore first two header rows\n      const teamCount = cells.length - 2;\n      const judgeCount =\n        findIndex(cells[0], (v) => v === \"Converted Scores\") -\n        // This can be \"Raw Scores\" (in the normal case) or \"Scores after Time Deduction\"\n        findLastIndex(cells[0], (v) => v.indexOf(\"Scores\") >= 0 && v !== \"Converted Scores\");\n\n      const raw = reduce(\n        // Only look at the team rows\n        cells.slice(2, 2 + teamCount),\n        (acc, row) =>\n          // Per row, extract the scores in the columns to the left of the Converted Scores. -3 is for the\n          // \"Results\" columns (avg, sanity, placing)\n          set(acc, row[0], row.slice(row.length - 3 - 2 * judgeCount, row.length - 3 - judgeCount)),\n        {}\n      );\n\n      return [raw, judgeCount];\n  }\n\n  // This stores raw scores from each competition in a dictionary with the key being the year\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const yearStr = localStorage.getItem(`${KEY_PREFIX}-${year}`);\n    const yearDetails = yearStr ? JSON.parse(yearStr) : {};\n\n    const localData = get(yearDetails, comp);\n    if (localData) {\n      return localData;\n    }\n\n    log.info(\"Had to fetch from Google sheets\", year, comp);\n\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      if (!spreadsheetId) {\n        throw new Error(\"no spreadsheet\");\n      }\n\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\",\n      });\n\n      // Parse v1\n      const [raw, judgeCount] = this.parseV1(response.result.values);\n\n      set(yearDetails, comp, [raw, judgeCount]);\n      localStorage.setItem(`${KEY_PREFIX}-${year}`, JSON.stringify(yearDetails));\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import { map, mapValues, values, range } from \"lodash\";\nimport { max, median, mean, min } from \"mathjs\";\nimport { ScoresDict } from \"../types\";\n\n/**\n * Handles a single competition.\n * :param year: year\n * :param comp: name of comp\n * :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n */\nexport const handleComp = (raw: ScoresDict, numJudges: number): CompDetail => {\n  // normalize for each group for this comp\n  const judgeAvgs = map(range(numJudges), (i) => {\n    const judgeScores = map(raw, (scores) => scores[i]);\n    const m = mean(judgeScores);\n    return m;\n  });\n\n  const normal = mapValues(raw, (scores) => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n  const rawAverages = mapValues(raw, (scores) => mean(scores));\n  const normalAverages = mapValues(normal, (scores) => mean(scores));\n  const normalMedians = mapValues(normal, (scores) => median(scores));\n  const finalScoresList = values(normalAverages);\n  const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n  const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n  // TODO judge names\n\n  return {\n    raw,\n    normal,\n    rawAverages,\n    normalAverages,\n    normalMedians,\n    max: compMax,\n    min: compMin,\n    judgeAvgs,\n  };\n};\n\nexport interface CompDetail {\n  raw: ScoresDict;\n  normal: ScoresDict;\n  rawAverages: Record<string, number>;\n  normalAverages: Record<string, number>;\n  normalMedians: Record<string, number>;\n  max: number;\n  min: number;\n  judgeAvgs: number[];\n}\n","import { median, mean, min, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  toPairs,\n  reverse,\n  sortBy,\n  values,\n  keys,\n  map,\n  range,\n  mapValues,\n  filter,\n  get,\n  size,\n  has,\n  set,\n} from \"lodash\";\nimport { DETAILS } from \"./compIds\";\nimport { GSheetsScoreManager } from \"./scoreManager\";\nimport { ScoresDict, Group, Stat, Rank } from \"../types\";\nimport log from \"loglevel\";\nimport { CompDetail, handleComp } from \"./compDetails\";\n\nexport class CircuitView {\n  year: Year;\n  comps: string[];\n  compDetails: Record<string, CompDetail> = {};\n  groups: Group[] = [];\n  amed: Record<Group, Stat> = {};\n  amean: Record<Group, Stat> = {};\n  rmed: Record<Group, Stat> = {};\n  rmean: Record<Group, Stat> = {};\n  amedRank: Record<Group, Rank> = {};\n  ameanRank: Record<Group, Rank> = {};\n  rmedRank: Record<Group, Rank> = {};\n  rmeanRank: Record<Group, Rank> = {};\n  attended: Record<Group, string[]> = {};\n  avgGroupsPerComp = 0;\n  avgJudgesPerComp = 0;\n  avgCompsPerGroup = 0;\n\n  /**\n   * Process competition scores to produce a CircuitView. `num` is the number of competitions to\n   * process. If num is -1, processes all competitions. `year` is the year to process.\n   */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const _comps: string[] = DETAILS[year].order;\n\n    if (num > _comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = _comps.length;\n\n    this.comps = _comps.slice(0, num);\n  }\n\n  async process() {\n    // FIXME For now, do sequentially because we need to cache in localStorage internally\n    const details = {} as Record<string, CompDetail>;\n    for (const comp of this.comps) {\n      details[comp] = await handleGComp(this.year, comp);\n    }\n\n    this.compDetails = details; /* zipObject(\n    cv.comps,\n    await Promise.all(map(cv.comps, comp => handleComp(cv.year, comp)))\n  );*/\n\n    // build normals\n    const [raw, normal] = build_totals(this.compDetails);\n    this.groups = keys(raw);\n\n    // evaluate numbers\n    const [amed, amean] = get_stats(raw);\n    const [rmed, rmean] = get_stats(normal);\n    this.amed = amed;\n    this.amean = amean;\n    this.rmed = rmed;\n    this.rmean = rmean;\n\n    // get ranks\n    this.amedRank = get_ranks(this.amed);\n    this.ameanRank = get_ranks(this.amean);\n    this.rmedRank = get_ranks(this.rmed);\n    this.rmeanRank = get_ranks(this.rmean);\n\n    // compute misc. stats\n    this.attended = reduce(\n      this.groups,\n      (acc, group) =>\n        set(\n          acc,\n          group,\n          filter(this.comps, (comp) => {\n            // See if this group competed in this comp\n            if (has(this.compDetails[comp].raw, group)) {\n              return true;\n            }\n            return false;\n          })\n        ),\n      {}\n    );\n\n    try {\n      this.avgGroupsPerComp = mean(map(this.compDetails, (det) => size(det.raw)));\n      this.avgJudgesPerComp = mean(map(this.compDetails, (det) => size(det.judgeAvgs)));\n      this.avgCompsPerGroup = mean(map(this.groups, (g) => size(this.attended[g])));\n    } catch (err) {\n      log.error(err);\n      this.avgGroupsPerComp = 0;\n      this.avgJudgesPerComp = 0;\n      this.avgCompsPerGroup = 0;\n    }\n    // cv.best_score = {\n    //     \"group\": \"Lel\",\n    //     \"comp\": \"Lol\",\n    //     \"score\": 420.69\n    // }\n  }\n\n  getGroupStats(group: Group) {\n    return {\n      amed: this.amed[group] || 0,\n      amean: this.amean[group] || 0,\n      rmed: this.rmed[group] || 0,\n      rmean: this.rmean[group] || 0,\n    };\n  }\n\n  getGroupRanks(group: Group) {\n    return {\n      amed: this.amedRank[group] || this.groups.length + 1,\n      amean: this.ameanRank[group] || this.groups.length + 1,\n      rmed: this.rmedRank[group] || this.groups.length + 1,\n      rmean: this.rmeanRank[group] || this.groups.length + 1,\n      total: this.groups.length,\n    };\n  }\n}\n\nexport type Year = string;\n\n/*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\nfunction build_totals(allScores?: Record<string, CompDetail>): [ScoresDict, ScoresDict] {\n  const allRaw: ScoresDict = {};\n  const allNormal: ScoresDict = {};\n\n  forEach(allScores, (val) => {\n    const raw = val.raw;\n    const normal = val.normal;\n\n    // TODO nicer reduce function?\n    forEach(raw, (scores, group) => {\n      allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n      allNormal[group] =\n        group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n    });\n  });\n\n  return [allRaw, allNormal];\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n\n// Map of group -> value\nfunction get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue = reverse(sortBy(values(pairs), [(p) => p[1]]));\n\n  // start with 1\n  return reduce(\n    sortedByValue,\n    (acc, cur, idx) => {\n      acc[cur[0]] = idx + 1;\n      return acc;\n    },\n    {} as Record<Group, Rank>\n  );\n}\n\nexport const handleGComp = async (year: Year, comp: string): Promise<CompDetail> => {\n  const scoreManager = new GSheetsScoreManager();\n\n  const [raw, numJudges] = await scoreManager.get_raw_scores(year, comp);\n\n  return handleComp(raw, numJudges);\n}\n\nexport const getStandings = (cv: CircuitView) => {\n  const buckets: Record<number, string[]> = {};\n\n  // Bucketize all groups\n  forEach(get(cv, \"groups\"), (group) => {\n    const bucket = max([\n      get(cv.amedRank, `[${group}]`, size(cv.groups)),\n      get(cv.ameanRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmedRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmeanRank, `[${group}]`, size(cv.groups)),\n    ]);\n    if (bucket) {\n      buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n    }\n  });\n\n  // Sort each bucket by group name\n  return mapValues(buckets, (vals) => sortBy(vals));\n};\n\n/*\n        Returns an ordered dictionary of all of the thresholded groups.\n        */\nexport const getFullStandings = (\n  cv: CircuitView\n): Record<number, Record<string, Record<string, number>>> => {\n  const buckets = getStandings(cv);\n\n  return mapValues(buckets, (groups) =>\n    reduce(\n      groups,\n      (acc, group) => {\n        acc[group] = {\n          amed: cv.amedRank[group],\n          amean: cv.ameanRank[group],\n          rmed: cv.rmedRank[group],\n          rmean: cv.rmeanRank[group],\n        };\n        return acc;\n      },\n      {} as Record<string, Record<string, number>>\n    )\n  );\n};\n\n/* Select groups given a threshold. */\nexport const selectGroups = (cv: CircuitView, threshold: number) => {\n  filter(\n    cv.groups,\n    (t) =>\n      get(cv.amedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.ameanRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmeanRank, `[${t}]`, size(cv.groups)) <= threshold\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Slider, Typography } from \"@material-ui/core\";\nimport { CircuitView, getFullStandings } from \"../services/circuitView\";\nimport { map, join, sortBy, get, size, last } from \"lodash\";\nimport { DETAILS } from \"../services/compIds\";\n\n// Shows the final bid point standings\n// - year: year to look at\nexport default function Standings({ year }: { year: string }) {\n  const [cv, setCv] = useState({} as CircuitView);\n  const [marks, setMarks] = useState<Array<{ value: number; label?: string }>>([]);\n\n  const [step, setStep] = useState(0);\n\n  useEffect(() => {\n    const loader = async () => {\n      const temp = new CircuitView(step, year);\n      await temp.process();\n      setCv(temp);\n    };\n\n    loader();\n  }, [step, year]);\n\n  // marks comes from DETAILS\n  useEffect(() => {\n    setMarks([\n      { value: 0 },\n      ...map(DETAILS[year].order, (comp, i) => ({\n        value: i + 1,\n        label: DETAILS[year].names[comp],\n      })),\n    ]);\n    setStep(0);\n  }, [year]);\n\n  const handleSlide = ({}, newValue: number | number[]) => {\n    setStep(newValue as number);\n  };\n\n  return (\n    <div>\n      <Slider\n        step={1}\n        marks={marks}\n        min={0}\n        max={last(marks)?.value || 0}\n        value={step}\n        onChange={handleSlide}\n      />\n      <Grid container justify=\"center\">\n        <Grid item xs={12}>\n          <Typography>\n            <b>{size(get(cv, \"groups\"))} groups</b>: {join(sortBy(get(cv, \"groups\")), \", \")}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>\n            <b>{size(get(cv, \"comps\"))} comps</b>: {join(get(cv, \"comps\"), \", \")}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={1}>\n          <Typography>Threshold</Typography>\n        </Grid>\n        <Grid container item xs={11}>\n          <Grid item xs>\n            <Typography>Team</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Mean</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Mean</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      {map(getFullStandings(cv), (groups, t) => (\n        <Grid container alignItems=\"center\" key={t} style={{ border: \"1px solid black\" }}>\n          <Grid item xs={1}>\n            <Typography>{t}</Typography>\n          </Grid>\n          <Grid item xs={11}>\n            {map(groups, (ranks, group) => (\n              <Grid container item xs={12} key={group}>\n                <Grid item xs>\n                  <Typography>{group}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amean}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmean}</Typography>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Tabs,\n  Tab,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Link,\n} from \"@material-ui/core\";\nimport { DETAILS } from \"../services/compIds\";\nimport { map, get, values } from \"lodash\";\nimport { GSheetsScoreManager } from \"../services/scoreManager\";\n\nconst sm = new GSheetsScoreManager();\n\n// Show individual competition results. Has tabs for each competition in the season.\nexport default function Results({ year }: { year: string }) {\n  const [compIndex, setCompIndex] = useState(0);\n  const [scores, setScores] = useState({} as any);\n\n  const yearDetails = DETAILS[year];\n  const comp = yearDetails.order[compIndex];\n  const sheetId = yearDetails.sheetIds[comp];\n\n  // eslint-disable-next-line\n  const handleChange = async ({}, newValue: number) => {\n    setCompIndex(newValue);\n  };\n\n  useEffect(() => {\n    const fetchStuff = async () => {\n      setScores(get(await sm.get_raw_scores(year, comp), \"[0]\"));\n    };\n\n    fetchStuff();\n  }, [compIndex, year]);\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Raw Results from Competitions</Typography>\n      <Tabs value={compIndex} onChange={handleChange}>\n        {map(yearDetails.order, (c) => (\n          <Tab key={c} label={yearDetails.names[c]} />\n        ))}\n      </Tabs>\n      {sheetId && (\n        <Typography>\n          <Link\n            href={`https://docs.google.com/spreadsheets/d/${sheetId}/edit`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Original Sheet\n          </Link>\n        </Typography>\n      )}\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Team</TableCell>\n              {map(values(scores)[0], ({}, i) => (\n                <TableCell>Judge {i + 1}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {map(scores, (scores, team) => (\n              <TableRow key={team}>\n                <TableCell>\n                  <Typography>{team}</Typography>\n                </TableCell>\n                {map(scores, (score, i) => (\n                  <TableCell key={i}>\n                    <Typography>{score}</Typography>\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.8d17df2f.png\";","import {\n  Card,\n  Divider,\n  Grid,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { find, last, map, range, round, size, slice, sortBy, values } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"../images/logo.png\";\nimport { CircuitView } from \"../services/circuitView\";\nimport { DETAILS } from \"../services/compIds\";\n\nfunction Report({ year, group, full }: { year: string; group: string; full: CircuitView }) {\n  const ranks = full.getGroupRanks(group);\n  const stats = full.getGroupStats(group);\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <img style={{ margin: \"0 auto\", height: 100 }} src={logo} />\n      </div>\n      <Typography variant=\"h1\">ASA Score Report {year}</Typography>\n      <Typography variant=\"h2\">{group.replace(\"_\", \" \")}</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Abs. Median</TableCell>\n              <TableCell>Abs. Mean</TableCell>\n              <TableCell>Rel. Median</TableCell>\n              <TableCell>Rel. Mean</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell variant=\"head\">Rank</TableCell>\n              <TableCell>{ranks.amed}</TableCell>\n              <TableCell>{ranks.amean}</TableCell>\n              <TableCell>{ranks.rmed}</TableCell>\n              <TableCell>{ranks.rmean}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">Score</TableCell>\n              <TableCell>{round(stats.amed, 2)}</TableCell>\n              <TableCell>{round(stats.amean, 2)}</TableCell>\n              <TableCell>{round(stats.rmed, 2)}</TableCell>\n              <TableCell>{round(stats.rmean, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Typography variant=\"h2\">Competitions</Typography>\n      <Grid container spacing={2} justify=\"center\">\n        {map(full.attended[group], (comp) => {\n          const det = full.compDetails[comp];\n\n          return (\n            <Grid item xs={9}>\n              <Card>\n                <Typography variant=\"h5\">\n                  {find(DETAILS[year].names, (_n, k) => k === comp)}\n                </Typography>\n                <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography>Normalized Scores</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Max</Typography>\n                    <Typography>{round(det.max, 2)}</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Min</Typography>\n                    <Typography>{round(det.min, 2)}</Typography>\n                  </Grid>\n                </Grid>\n                <Divider variant=\"middle\" />\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell />\n                        {map(det.judgeAvgs, (_a, i) => (\n                          <TableCell>{i + 1}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell variant=\"head\">Judge raw avg</TableCell>\n                        {map(det.judgeAvgs, (a) => (\n                          <TableCell>{round(a, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your raw</TableCell>\n                        {map(det.raw[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your normalized</TableCell>\n                        {map(det.normal[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n      <Typography variant=\"h2\">General Circuit Stats</Typography>\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Total Groups</TableCell>\n              <TableCell>Avg. Groups/Competition</TableCell>\n              <TableCell>Avg. Judges/Competition</TableCell>\n              <TableCell>Avg. Competitions/Group</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{size(full.groups)}</TableCell>\n              <TableCell>{round(full.avgGroupsPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgJudgesPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgCompsPerGroup, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\n// Show a score report for a single team\nexport default function ReportView({ year }: { year: string }) {\n  const [circuitViews, setCircuitViews] = useState<CircuitView[]>([]);\n  const [group, setGroup] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fn = async () => {\n      const numComps = DETAILS[year].order.length;\n\n      const cvPromises = map(range(numComps), async (i) => {\n        const cv = new CircuitView(i + 1, year);\n        await cv.process();\n        return cv;\n      });\n      setCircuitViews(await Promise.all(cvPromises));\n    };\n\n    fn();\n  }, [year]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroup(event.target.value);\n  };\n\n  const full = last(circuitViews);\n  let groups;\n  if (full) {\n    groups = full.groups;\n  }\n\n  return (\n    <>\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>Select a team:</Typography>\n        </Grid>\n        <Grid item>\n          <TextField select value={group} onChange={handleChange}>\n            {map(groups && groups.sort(), (g) => (\n              <MenuItem value={g}>{g}</MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n      </Grid>\n      {group && full && <Report group={group} full={full} year={year} />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./services/google\";\nimport Standings from \"./pages/Standings\";\nimport { Grid } from \"@material-ui/core\";\nimport \"typeface-roboto\";\nimport Results from \"./pages/Results\";\nimport Report from \"./pages/Report\";\n\nlog.setLevel(\"debug\");\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n  const [year, setYear] = useState(\"2022\");\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES,\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi().auth2.getAuthInstance().isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(getGapi().auth2.getAuthInstance().isSignedIn.get());\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi().auth2.getAuthInstance().signIn();\n  };\n\n  const handleSignOut = () => {\n    localStorage.clear();\n    getGapi().auth2.getAuthInstance().signOut();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYear(event.target.value);\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        {isSignedIn ? (\n          <>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"center\">\n              <Grid item>\n                <TextField select label=\"Season\" value={year} onChange={handleChange}>\n                  <MenuItem value=\"18-19\">2018-2019</MenuItem>\n                  <MenuItem value=\"19-20\">2019-2020</MenuItem>\n                  <MenuItem value=\"2022\">2022</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item>\n                <Link to=\"/\">\n                  <Typography>Home/Standings</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/results\">\n                  <Typography>Comp Results</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/report\">\n                  <Typography>Team Reports</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Button onClick={handleSignOut} variant=\"outlined\">\n                  Sign Out!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\">\n              <Switch>\n                <Route path=\"/results\">\n                  <Grid item xs={12} lg={8}>\n                    <Results year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/report\">\n                  <Grid item xs={12} lg={10}>\n                    <Report year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/\">\n                  <Grid item xs={8} lg={8}>\n                    <Standings year={year} />\n                  </Grid>\n                </Route>\n              </Switch>\n            </Grid>\n          </>\n        ) : (\n          <Button onClick={handleSignIn} variant=\"outlined\">\n            {\" \"}\n            Sign In!\n          </Button>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}