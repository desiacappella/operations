{"version":3,"sources":["services/google.ts","services/compIds.ts","services/scoreManager.ts","lib/competition.ts","lib/calculator.ts","lib/circuitView.ts","pages/Standings.tsx","pages/Results.tsx","images/logo.png","pages/Report.tsx","App.tsx","constants.ts","index.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","DETAILS","order","names","jeena","anahat","sangeet","mehfil","sahana","gathe","awaazein","sheetIds","sapna","KEY_PREFIX","GSheetsScoreManager","cells","teamCount","length","convertedScoresStart","findIndex","v","startsWith","rawScoresStart","findLastIndex","indexOf","judgeCount","reduce","slice","acc","row","set","year","comp","yearStr","localStorage","getItem","yearDetails","JSON","parse","localData","get","log","info","spreadsheetId","Error","client","sheets","spreadsheets","values","range","response","this","parseV1","result","raw","setItem","stringify","error","handleComp","numJudges","judgeAvgs","map","i","judgeScores","scores","mean","normal","mapValues","x","rawAverages","normalAverages","normalMedians","median","finalScoresList","compMax","max","compMin","min","handleGComp","a","scoreManager","get_raw_scores","get_ranks","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","rankMap","curRank","last","undefined","forEach","cur","idx","CircuitView","num","comps","compDetails","groups","amed","amean","rmed","rmean","amedRank","ameanRank","rmedRank","rmeanRank","attended","avgGroupsPerComp","avgJudgesPerComp","avgCompsPerGroup","details","e","build_totals","keys","get_stats","group","filter","has","det","size","g","err","total","buckets","bucket","concat","vals","getStandings","threshold","t","allScores","allRaw","allNormal","val","_med","_mean","score","Standings","useState","cv","setCv","marks","setMarks","step","setStep","useEffect","temp","process","loader","value","label","fullStandings","getFullStandings","rows","first","thresholdRows","ranks","TableRow","TableCell","rowSpan","Grid","container","justify","item","xs","Slider","onChange","newValue","Typography","join","c","TableContainer","Table","TableHead","TableBody","Results","compIndex","setCompIndex","compDetail","setCompDetail","isRaw","setIsRaw","sheetId","fetchStuff","current","variant","component","alignItems","spacing","Switch","checked","Tabs","Tab","Link","href","target","rel","team","avg","Report","full","getGroupRanks","stats","getGroupStats","style","display","margin","height","src","logo","alt","replace","round","Card","find","_n","k","Divider","_a","ReportView","circuitViews","setCircuitViews","setGroup","numComps","cvPromises","Promise","all","fn","TextField","select","event","sort","MenuItem","App","isSignedIn","setSignedIn","setYear","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","basename","className","to","Button","onClick","clear","signOut","path","sm","lg","signIn","setLevel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48deb8f8.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","interface SingleYear {\n  order: string[];\n  names: Record<string, string>;\n  sheetIds: Record<string, string>;\n}\n\nexport const DETAILS: Record<string, SingleYear> = {\n  \"18-19\": {\n    order: [\"jeena\", \"anahat\", \"sangeet\", \"mehfil\", \"sahana\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      mehfil: \"Mehfil\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      anahat: \"1iFCNADUpzFyqp5UjHsFdSJkSp5C5xU7C0YI3Asf_Q0k\",\n      awaazein: \"1pLN6SKR444CdhzntJjDXnPMlqXtxr3dlTV5lnYWOFXI\",\n      gathe: \"1cg6XptCMQsWfmu7RnncfWP1E5b_FSyFOrDehbwlFUFY\",\n      jeena: \"1B1qh4kKSeAFTV1r3MO4Y5jikyYFGHOe7-c46ha3Y-qc\",\n      mehfil: \"1k7F_gBNM1OfDta5_gT_cHovDmt32jbXw--YMoTk1yc4\",\n      sahana: \"1m9l2EQS3h75dlXz7A8E2JKc5GMXJOHlBS3gPlrgI3b4\",\n      sangeet: \"1pYyUIt2RvZ5AOZwwzIvZKd-KTuUE9uPOpT2BpReqkgo\",\n    },\n  },\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\",\n      gathe: \"1RAqltt5vl4uk0gq3RCe4fNWu0taGokv2UP9vjWXO8JY\",\n      awaazein: \"1KYCn0RWMxbWabw4AuZzzsIyKZyCRnadvqcZVi9t7oDM\",\n    },\n  },\n  \"2022\": {\n    order: [\"sangeet\", \"sapna\", \"jeena\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      sangeet: \"1HV0ytC_S8O1TrkPBjhH4Nnk43o_S8u-lz53krjFoDi4\",\n      sapna: \"1x-60JJXicIrXA_m7x1652SSl7gJ_aKqDBNA22IcwF8w\",\n      jeena: \"1Ul53wzbCMpO_nmZ-l4HDZUFHHTKNMvsHCSq1XH2mekU\",\n    },\n  },\n};\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./compIds\";\nimport { findIndex, reduce, set, get, findLastIndex } from \"lodash\";\nimport { ScoresDict } from \"../types\";\nimport log from \"loglevel\";\n\nconst KEY_PREFIX = \"compDetails\";\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  parseV1(cells: string[][]): [ScoresDict, number] {\n    // Ignore first two header rows\n    const teamCount = cells.length - 2;\n    const convertedScoresStart = findIndex(cells[0], (v) => v.startsWith(\"Converted Scores\"));\n    // This can be \"Raw Scores\" (in the normal case) or \"Scores after Time Deduction\"\n    const rawScoresStart = findLastIndex(\n      cells[0],\n      (v) => v.indexOf(\"Scores\") >= 0 && v.indexOf(\"Converted Scores\") < 0\n    );\n    const judgeCount = convertedScoresStart - rawScoresStart;\n\n    // How much stuff is at the end of each row?\n    // - Some sheets have 3 columns: avg, sanity, placing\n    // - Some sheets have 5 columns:\n\n    const raw = reduce(\n      // Only look at the team rows\n      cells.slice(2, 2 + teamCount),\n      (acc, row) =>\n        // Per row, extract the scores in the columns to the left of the Converted Scores. -3 is for the\n        // \"Results\" columns (avg, sanity, placing)\n        set(acc, row[0], row.slice(rawScoresStart, convertedScoresStart)),\n      {}\n    );\n\n    return [raw, judgeCount];\n  }\n\n  // This stores raw scores from each competition in a dictionary with the key being the year\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const yearStr = localStorage.getItem(`${KEY_PREFIX}-${year}`);\n    const yearDetails = yearStr ? JSON.parse(yearStr) : {};\n\n    const localData = get(yearDetails, comp);\n    if (localData) {\n      return localData;\n    }\n\n    log.info(\"Had to fetch from Google sheets\", year, comp);\n\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      if (!spreadsheetId) {\n        throw new Error(\"no spreadsheet\");\n      }\n\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\",\n      });\n\n      // Parse v1\n      const [raw, judgeCount] = this.parseV1(response.result.values);\n\n      set(yearDetails, comp, [raw, judgeCount]);\n      localStorage.setItem(`${KEY_PREFIX}-${year}`, JSON.stringify(yearDetails));\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import { mean, max, min, median } from \"mathjs\";\nimport { values, map, range, mapValues } from \"lodash\";\nimport { CompDetail, ScoresDict, Year } from \"../types\";\nimport { GSheetsScoreManager } from \"../services/scoreManager\";\n\n/**\n * Handles a single competition.\n * :param year: year\n * :param comp: name of comp\n * :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n */\nexport const handleComp = (raw: ScoresDict, numJudges: number): CompDetail => {\n  // normalize for each group for this comp\n  const judgeAvgs = map(range(numJudges), (i) => {\n    const judgeScores = map(raw, (scores) => scores[i]);\n    const m = mean(judgeScores);\n    return m;\n  });\n\n  const normal = mapValues(raw, (scores) => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n  const rawAverages = mapValues(raw, (scores) => mean(scores));\n  const normalAverages = mapValues(normal, (scores) => mean(scores));\n  const normalMedians = mapValues(normal, (scores) => median(scores));\n  const finalScoresList = values(normalAverages);\n  const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n  const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n  // TODO judge names\n\n  return {\n    raw,\n    normal,\n    rawAverages,\n    normalAverages,\n    normalMedians,\n    max: compMax,\n    min: compMin,\n    judgeAvgs,\n  };\n};\n\n// Retrieve competition details for a year and competition name\nexport const handleGComp = async (year: Year, comp: string): Promise<CompDetail> => {\n  const scoreManager = new GSheetsScoreManager();\n\n  const [raw, numJudges] = await scoreManager.get_raw_scores(year, comp);\n\n  return handleComp(raw, numJudges);\n};\n","import { toPairs, reverse, sortBy, values, forEach } from \"lodash\";\nimport { Group, Rank, Stat } from \"../types\";\n\n// Map of group -> value\nexport function get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue: [Group, number][] = reverse(sortBy(values(pairs), [(p) => p[1]]));\n\n  const rankMap: Record<Group, Rank> = {};\n  // start with 1\n  let curRank = 1;\n  let last: number | undefined = undefined;\n  forEach(sortedByValue, (cur, idx) => {\n    // Handle duplicates\n    if (last == undefined || last !== cur[1]) {\n      // Bump rank if not the same\n      curRank = idx + 1;\n    }\n    rankMap[cur[0]] = curRank;\n    last = cur[1];\n  });\n  return rankMap;\n}\n","import { median, mean, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  sortBy,\n  keys,\n  map,\n  mapValues,\n  filter,\n  get,\n  size,\n  has,\n  set,\n} from \"lodash\";\nimport { DETAILS } from \"../services/compIds\";\nimport { ScoresDict, Group, Stat, Rank, CompDetail, Year } from \"../types\";\nimport log from \"loglevel\";\nimport { handleGComp } from \"./competition\";\nimport { get_ranks } from \"./calculator\";\n\n// Represents the view across multiple competitions, i.e. a season or part of a season.\nexport class CircuitView {\n  year: Year;\n  comps: string[];\n  compDetails: Record<string, CompDetail> = {};\n  groups: Group[] = [];\n  amed: Record<Group, Stat> = {};\n  amean: Record<Group, Stat> = {};\n  rmed: Record<Group, Stat> = {};\n  rmean: Record<Group, Stat> = {};\n  amedRank: Record<Group, Rank> = {};\n  ameanRank: Record<Group, Rank> = {};\n  rmedRank: Record<Group, Rank> = {};\n  rmeanRank: Record<Group, Rank> = {};\n  attended: Record<Group, string[]> = {};\n  avgGroupsPerComp = 0;\n  avgJudgesPerComp = 0;\n  avgCompsPerGroup = 0;\n\n  /**\n   * Process competition scores to produce a CircuitView. `num` is the number of competitions to\n   * process. If num is -1, processes all competitions. `year` is the year to process.\n   */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const comps: string[] = DETAILS[year]?.order || [];\n\n    if (num > comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = comps.length;\n\n    this.comps = comps.slice(0, num);\n  }\n\n  async process() {\n    // FIXME For now, do sequentially because we need to cache in localStorage internally\n    const details = {} as Record<string, CompDetail>;\n    for (const comp of this.comps) {\n      details[comp] = await handleGComp(this.year, comp);\n    }\n\n    this.compDetails = details; /* zipObject(\n    cv.comps,\n    await Promise.all(map(cv.comps, comp => handleComp(cv.year, comp)))\n  );*/\n\n    // build normals\n    const [raw, normal] = CircuitView.build_totals(this.compDetails);\n    this.groups = keys(raw);\n\n    // evaluate numbers\n    const [amed, amean] = get_stats(raw);\n    const [rmed, rmean] = get_stats(normal);\n    this.amed = amed;\n    this.amean = amean;\n    this.rmed = rmed;\n    this.rmean = rmean;\n\n    // get ranks\n    this.amedRank = get_ranks(this.amed);\n    this.ameanRank = get_ranks(this.amean);\n    this.rmedRank = get_ranks(this.rmed);\n    this.rmeanRank = get_ranks(this.rmean);\n\n    // compute misc. stats\n    this.attended = reduce(\n      this.groups,\n      (acc, group) =>\n        set(\n          acc,\n          group,\n          filter(this.comps, (comp) => {\n            // See if this group competed in this comp\n            if (has(this.compDetails[comp].raw, group)) {\n              return true;\n            }\n            return false;\n          })\n        ),\n      {}\n    );\n\n    try {\n      this.avgGroupsPerComp = mean(map(this.compDetails, (det) => size(det.raw)));\n      this.avgJudgesPerComp = mean(map(this.compDetails, (det) => size(det.judgeAvgs)));\n      this.avgCompsPerGroup = mean(map(this.groups, (g) => size(this.attended[g])));\n    } catch (err) {\n      log.error(err);\n      this.avgGroupsPerComp = 0;\n      this.avgJudgesPerComp = 0;\n      this.avgCompsPerGroup = 0;\n    }\n    // cv.best_score = {\n    //     \"group\": \"Lel\",\n    //     \"comp\": \"Lol\",\n    //     \"score\": 420.69\n    // }\n  }\n\n  /*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\n  private static build_totals(allScores?: Record<string, CompDetail>): [ScoresDict, ScoresDict] {\n    const allRaw: ScoresDict = {};\n    const allNormal: ScoresDict = {};\n\n    forEach(allScores, (val) => {\n      const raw = val.raw;\n      const normal = val.normal;\n\n      // TODO nicer reduce function?\n      forEach(raw, (scores, group) => {\n        allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n        allNormal[group] =\n          group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n      });\n    });\n\n    return [allRaw, allNormal];\n  }\n\n  getGroupStats(group: Group) {\n    return {\n      amed: this.amed[group] || 0,\n      amean: this.amean[group] || 0,\n      rmed: this.rmed[group] || 0,\n      rmean: this.rmean[group] || 0,\n    };\n  }\n\n  getGroupRanks(group: Group) {\n    return {\n      amed: this.amedRank[group] || this.groups.length + 1,\n      amean: this.ameanRank[group] || this.groups.length + 1,\n      rmed: this.rmedRank[group] || this.groups.length + 1,\n      rmean: this.rmeanRank[group] || this.groups.length + 1,\n      total: this.groups.length,\n    };\n  }\n\n  getStandings() {\n    const buckets: Record<number, string[]> = {};\n\n    // Bucketize all groups\n    forEach(this.groups, (group) => {\n      const bucket = max([\n        get(this.amedRank, `[${group}]`, size(this.groups)),\n        get(this.ameanRank, `[${group}]`, size(this.groups)),\n        get(this.rmedRank, `[${group}]`, size(this.groups)),\n        get(this.rmeanRank, `[${group}]`, size(this.groups)),\n      ]);\n      if (bucket) {\n        buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n      }\n    });\n\n    // Sort each bucket by group name\n    return mapValues(buckets, (vals) => sortBy(vals));\n  }\n\n  /**\n   * Returns an ordered dictionary of all of the thresholded groups.\n   */\n  getFullStandings(): Record<number, Record<string, Record<string, number>>> {\n    const buckets = this.getStandings();\n\n    return mapValues(buckets, (groups) =>\n      reduce(\n        groups,\n        (acc, group) => {\n          acc[group] = {\n            amed: this.amedRank[group],\n            amean: this.ameanRank[group],\n            rmed: this.rmedRank[group],\n            rmean: this.rmeanRank[group],\n          };\n          return acc;\n        },\n        {} as Record<string, Record<string, number>>\n      )\n    );\n  }\n\n  /* Select groups given a threshold. */\n  selectGroups(threshold: number) {\n    return filter(\n      this.groups,\n      (t) =>\n        get(this.amedRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.ameanRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.rmedRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.rmeanRank, `[${t}]`, size(this.groups)) <= threshold\n    );\n  }\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Slider,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { CircuitView } from \"../lib/circuitView\";\nimport { map, join, sortBy, get, size, last, reduce, concat } from \"lodash\";\nimport { DETAILS } from \"../services/compIds\";\n\n// Shows the final bid point standings\n// - year: year to look at\nexport default function Standings({ year }: { year: string }) {\n  const [cv, setCv] = useState(new CircuitView(0, \"\"));\n  const [marks, setMarks] = useState<Array<{ value: number; label?: string }>>([]);\n\n  const [step, setStep] = useState(0);\n\n  useEffect(() => {\n    const loader = async () => {\n      const temp = new CircuitView(step, year);\n      await temp.process();\n      setCv(temp);\n    };\n\n    loader();\n  }, [step, year]);\n\n  // marks comes from DETAILS\n  useEffect(() => {\n    setMarks([\n      { value: 0 },\n      ...map(DETAILS[year].order, (comp, i) => ({\n        value: i + 1,\n        label: DETAILS[year].names[comp],\n      })),\n    ]);\n    setStep(0);\n  }, [year]);\n\n  const handleSlide = ({}, newValue: number | number[]) => {\n    setStep(newValue as number);\n  };\n\n  const fullStandings = cv ? cv.getFullStandings() : {};\n  const rows = reduce(\n    fullStandings,\n    (acc, groups, threshold) => {\n      let first = true;\n      // For each threshold, add all the teams\n      const thresholdRows = map(groups, (ranks, group) => {\n        const row = (\n          <TableRow key={group}>\n            {first && <TableCell rowSpan={size(groups)}>{threshold}</TableCell>}\n            <TableCell>{group}</TableCell>\n            <TableCell>{ranks.amed}</TableCell>\n            <TableCell>{ranks.amean}</TableCell>\n            <TableCell>{ranks.rmed}</TableCell>\n            <TableCell>{ranks.rmean}</TableCell>\n          </TableRow>\n        );\n        first = false;\n        return row;\n      });\n\n      return concat(acc, ...thresholdRows);\n    },\n    [] as JSX.Element[]\n  );\n\n  return (\n    <div>\n      <Grid container justify=\"center\">\n        <Grid item xs={11}>\n          <Slider\n            step={1}\n            marks={marks}\n            min={0}\n            max={last(marks)?.value || 0}\n            value={step}\n            onChange={handleSlide}\n          />\n        </Grid>\n      </Grid>\n      <Grid container justify=\"center\">\n        <Grid item xs={12}>\n          <Typography>\n            <b>{size(get(cv, \"groups\"))} groups</b>: {join(sortBy(get(cv, \"groups\")), \", \")}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>\n            <b>{size(get(cv, \"comps\"))} comps</b>:{\" \"}\n            {join(\n              map(cv?.comps, (c) => DETAILS[year].names[c]),\n              \", \"\n            )}\n          </Typography>\n        </Grid>\n      </Grid>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Threshold</TableCell>\n              <TableCell>Team</TableCell>\n              <TableCell>Abs Median</TableCell>\n              <TableCell>Abs Mean</TableCell>\n              <TableCell>Rel Median</TableCell>\n              <TableCell>Rel Mean</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Tabs,\n  Tab,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Link,\n  Switch,\n  Grid,\n} from \"@material-ui/core\";\nimport { DETAILS } from \"../services/compIds\";\nimport { map, values } from \"lodash\";\nimport { handleGComp } from \"../lib/competition\";\nimport { CompDetail } from \"../types\";\n\n// Show individual competition results. Has tabs for each competition in the season.\nexport default function Results({ year }: { year: string }) {\n  const [compIndex, setCompIndex] = useState(0);\n  const [compDetail, setCompDetail] = useState({} as CompDetail);\n  const [isRaw, setIsRaw] = useState(true);\n\n  const yearDetails = DETAILS[year];\n  const comp = yearDetails.order[compIndex];\n  const sheetId = yearDetails.sheetIds[comp];\n\n  // eslint-disable-next-line\n  const handleChange = ({}, newValue: number) => {\n    setCompIndex(newValue);\n  };\n\n  // eslint-disable-next-line\n  const handleSwitch = ({}, checked: boolean) => {\n    setIsRaw(checked);\n  };\n\n  useEffect(() => {\n    const fetchStuff = async () => {\n      setCompDetail(await handleGComp(year, comp));\n    };\n\n    fetchStuff();\n  }, [comp, year]);\n\n  const current = isRaw ? compDetail.raw : compDetail.normal;\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Raw Results from Competitions</Typography>\n      <Grid component=\"label\" container justify=\"center\" alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <Typography>Normal</Typography>\n        </Grid>\n        <Grid item>\n          <Switch checked={isRaw} onChange={handleSwitch} />\n        </Grid>\n        <Grid item>\n          <Typography>Raw</Typography>\n        </Grid>\n      </Grid>\n      <Tabs value={compIndex} onChange={handleChange}>\n        {map(yearDetails.order, (c) => (\n          <Tab key={c} label={yearDetails.names[c]} />\n        ))}\n      </Tabs>\n      {sheetId && (\n        <Typography>\n          <Link\n            href={`https://docs.google.com/spreadsheets/d/${sheetId}/edit`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Original Sheet\n          </Link>\n        </Typography>\n      )}\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Team</TableCell>\n              {map(values(current)[0], ({}, i) => (\n                <TableCell>Judge {i + 1}</TableCell>\n              ))}\n              <TableCell>Average</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {map(current, (scores, team) => (\n              <TableRow key={team}>\n                <TableCell>{team}</TableCell>\n                {map(scores, (score, i) => (\n                  <TableCell key={i}>{score}</TableCell>\n                ))}\n                <TableCell variant=\"head\">\n                  {isRaw ? compDetail.rawAverages[team] : compDetail.normalAverages[team]}\n                </TableCell>\n              </TableRow>\n            ))}\n            <TableRow>\n              <TableCell variant=\"head\">Judge Average</TableCell>\n              {map(compDetail.judgeAvgs, (avg, i) => (\n                <TableCell variant=\"head\" key={i}>\n                  {avg}\n                </TableCell>\n              ))}\n              <TableCell />\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.8d17df2f.png\";","import {\n  Card,\n  Divider,\n  Grid,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { find, last, map, range, round, size } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"../images/logo.png\";\nimport { CircuitView } from \"../lib/circuitView\";\nimport { DETAILS } from \"../services/compIds\";\n\nfunction Report({ year, group, full }: { year: string; group: string; full: CircuitView }) {\n  const ranks = full.getGroupRanks(group);\n  const stats = full.getGroupStats(group);\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <img style={{ margin: \"0 auto\", height: 100 }} src={logo} alt=\"ASA\" />\n      </div>\n      <Typography variant=\"h1\">ASA Score Report {year}</Typography>\n      <Typography variant=\"h2\">{group.replace(\"_\", \" \")}</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Abs. Median</TableCell>\n              <TableCell>Abs. Mean</TableCell>\n              <TableCell>Rel. Median</TableCell>\n              <TableCell>Rel. Mean</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell variant=\"head\">Rank</TableCell>\n              <TableCell>{ranks.amed}</TableCell>\n              <TableCell>{ranks.amean}</TableCell>\n              <TableCell>{ranks.rmed}</TableCell>\n              <TableCell>{ranks.rmean}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">Score</TableCell>\n              <TableCell>{round(stats.amed, 2)}</TableCell>\n              <TableCell>{round(stats.amean, 2)}</TableCell>\n              <TableCell>{round(stats.rmed, 2)}</TableCell>\n              <TableCell>{round(stats.rmean, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Typography variant=\"h2\">Competitions</Typography>\n      <Grid container spacing={2} justify=\"center\">\n        {map(full.attended[group], (comp) => {\n          const det = full.compDetails[comp];\n\n          return (\n            <Grid item xs={9}>\n              <Card>\n                <Typography variant=\"h5\">\n                  {find(DETAILS[year].names, (_n, k) => k === comp)}\n                </Typography>\n                <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography>Normalized Scores</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Max</Typography>\n                    <Typography>{round(det.max, 2)}</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Min</Typography>\n                    <Typography>{round(det.min, 2)}</Typography>\n                  </Grid>\n                </Grid>\n                <Divider variant=\"middle\" />\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell />\n                        {map(det.judgeAvgs, (_a, i) => (\n                          <TableCell>{i + 1}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell variant=\"head\">Judge raw avg</TableCell>\n                        {map(det.judgeAvgs, (a) => (\n                          <TableCell>{round(a, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your raw</TableCell>\n                        {map(det.raw[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your normalized</TableCell>\n                        {map(det.normal[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n      <Typography variant=\"h2\">General Circuit Stats</Typography>\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Total Groups</TableCell>\n              <TableCell>Avg. Groups/Competition</TableCell>\n              <TableCell>Avg. Judges/Competition</TableCell>\n              <TableCell>Avg. Competitions/Group</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{size(full.groups)}</TableCell>\n              <TableCell>{round(full.avgGroupsPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgJudgesPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgCompsPerGroup, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\n// Show a score report for a single team\nexport default function ReportView({ year }: { year: string }) {\n  const [circuitViews, setCircuitViews] = useState<CircuitView[]>([]);\n  const [group, setGroup] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fn = async () => {\n      const numComps = DETAILS[year].order.length;\n\n      const cvPromises = map(range(numComps), async (i) => {\n        const cv = new CircuitView(i + 1, year);\n        await cv.process();\n        return cv;\n      });\n      setCircuitViews(await Promise.all(cvPromises));\n    };\n\n    fn();\n  }, [year]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroup(event.target.value);\n  };\n\n  const full = last(circuitViews);\n  const groups = full?.groups;\n\n  return (\n    <>\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>Select a team:</Typography>\n        </Grid>\n        <Grid item>\n          <TextField select value={group} onChange={handleChange}>\n            {map(groups && groups.sort(), (g) => (\n              <MenuItem value={g}>{g}</MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n      </Grid>\n      {group && full && <Report group={group} full={full} year={year} />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./services/google\";\nimport Standings from \"./pages/Standings\";\nimport { Grid } from \"@material-ui/core\";\nimport \"typeface-roboto\";\nimport Results from \"./pages/Results\";\nimport Report from \"./pages/Report\";\nimport { BASENAME } from \"./constants\";\n\nlog.setLevel(\"debug\");\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n  const [year, setYear] = useState(\"2022\");\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES,\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi().auth2.getAuthInstance().isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(getGapi().auth2.getAuthInstance().isSignedIn.get());\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi().auth2.getAuthInstance().signIn();\n  };\n\n  const handleSignOut = () => {\n    localStorage.clear();\n    getGapi().auth2.getAuthInstance().signOut();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYear(event.target.value);\n  };\n\n  return (\n    <BrowserRouter basename={BASENAME}>\n      <div className=\"App\">\n        {isSignedIn ? (\n          <>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"center\">\n              <Grid item>\n                <TextField select label=\"Season\" value={year} onChange={handleChange}>\n                  <MenuItem value=\"18-19\">2018-2019</MenuItem>\n                  <MenuItem value=\"19-20\">2019-2020</MenuItem>\n                  <MenuItem value=\"2022\">2022</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item>\n                <Link to={`/`}>\n                  <Typography>Bid Point System</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to={`/results`}>\n                  <Typography>Comp Results</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to={`/report`}>\n                  <Typography>Team Reports</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Button onClick={handleSignOut} variant=\"outlined\">\n                  Sign Out!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\">\n              <Switch>\n                <Route path=\"/results\">\n                  <Grid item sm={12}>\n                    <Results year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/report\">\n                  <Grid item sm={12} lg={10}>\n                    <Report year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/\">\n                  <Grid item sm={12} lg={8}>\n                    <Standings year={year} />\n                  </Grid>\n                </Route>\n              </Switch>\n            </Grid>\n          </>\n        ) : (\n          <Button onClick={handleSignIn} variant=\"outlined\">\n            {\" \"}\n            Sign In!\n          </Button>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n","export const BASENAME = \"operations\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}